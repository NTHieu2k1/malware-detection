from json import loads
from mongoengine import Document, StringField, DictField, connect

# TODO: Put database's information into config file
DB_HOST_IP = '127.0.0.1'
DB_PORT = 27017


class FileInfo(Document):
    id = StringField(required=True, primary_key=True)
    md5 = StringField(required=True)
    file = StringField(required=True)
    status = StringField(required=True, max_length=20)
    predictions = DictField()
    error_msg = DictField()


class Database:
    def __init__(self):
        connect(db='malware_db', host=DB_HOST_IP, port=DB_PORT)

    def load_all_prediction_results(self):
        return loads(FileInfo.objects.to_json())

    def create_new_file_info(self, file_id: str, file_name: str, status: str):
        new_file_info = FileInfo(id=file_id, md5=file_id, file=file_name, status=status)
        new_file_info.save()

    def load_file_name(self, file_id):
        try:
            file_name = FileInfo.objects(id=file_id)[0].file
            return file_name
        except IndexError:
            return None

    def load_status(self, file_id):
        try:
            status = FileInfo.objects(id=file_id)[0].status
            return status
        except IndexError:
            return None

    def update_status(self, file_id, new_status: str):
        FileInfo.objects(id=file_id).update(set__status=new_status)

    def add_prediction(self, file_id, predictions: dict):
        FileInfo.objects(id=file_id).update(set__predictions=predictions)

    def load_prediction(self, file_id):
        try:
            prediction = FileInfo.objects(id=file_id)[0].predictions
            return prediction
        except IndexError:
            return None

    def add_error_message(self, file_id, error_message: dict):
        FileInfo.objects(id=file_id).update(set__error_msg=error_message)

    def load_error_message(self, file_id):
        try:
            error_message = FileInfo.objects(id=file_id)[0].error_msg
            return error_message
        except IndexError:
            return None

    def is_file_exist(self, file_id) -> bool:
        try:
            found_id = FileInfo.objects(id=file_id)[0].id
            return True
        except IndexError:
            return False
