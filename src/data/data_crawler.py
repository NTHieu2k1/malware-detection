import asyncio
from pyppeteer import launch, page


async def launch_browser():
    return await launch({'headless': False})


async def open_page(browser, url) -> page.Page:
    browser_page = await browser.newPage()
    await browser_page.goto(url)
    return browser_page


async def get_links_and_names(browser) -> dict:
    # Open taimienphi website
    tmp_page = await open_page(browser, url='https://taimienphi.vn')

    # Select "a" tag that contains categories and their urls
    elements = await tmp_page.xpath('//div[@class="bx bxb bgcolr"]/ul/li/a')
    link_elements = dict()

    # Extract urls and categories themselves
    for element in elements:
        link = await tmp_page.evaluate('(element) => element.href', element)
        folder = await tmp_page.evaluate('(element) => element.textContent', element)
        link_elements.update({folder: link})

    return link_elements


def preprocessing_link_data(url_data: dict) -> dict:
    """This function is used to pre-process URL-category data crawled in taimienphi website.
    This function consisted of 2 parts: remove some unnecessary categories,
    and replacing whitespaces in names.
    """

    # Define unnecessary categories
    unnecessary_categories = [
        'Mới cập nhật',
        'Top Tải về',
        'Tài liệu',
        'Biểu mẫu',
        'Đề thi',
        'Học ngoại ngữ',
        'Ứng dụng Android',
        'Ứng dụng iOS',
        'Gọi xe',
        'Vận tải, hành khách',
        'Phần mềm mới'
    ]

    for category in list(url_data.keys()):
        # Remove some unnecessary categories
        if category in unnecessary_categories:
            url_data.pop(category)
            continue
        # Other categories: replace whitespaces by underscores
        category = category.replace(' ', '_')

    # Return preprocessed data
    return url_data


async def run_multi_pages():
    """Just for testing open and close multiple pages on multiple tabs."""

    # Open browser, and get the url-category data
    browser = await launch_browser()
    link_dict = await get_links_and_names(browser)

    # Preprocessing the url-category data, and get the URL data
    link_dict = preprocessing_link_data(link_dict)
    url_list = list(link_dict.values())

    # Open and close all URLs in the URL data
    for url in url_list:
        new_link = await browser.newPage()
        await new_link.goto(url)
        await asyncio.sleep(5)
        await new_link.close()

    # Close the browser
    await browser.close()


asyncio.run(run_multi_pages())
