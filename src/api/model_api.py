from fastapi import FastAPI, File, UploadFile
from src.models.model_file_io import ModelFileIO
from src.api.cache import Cache
from src.api.database import Database
import pefile
from hashlib import md5

malware_detector = FastAPI()
cache = Cache()
database = Database()


@malware_detector.get('/')
async def root():
    return {'intro': 'This is a malware detector application.'}


def validate_pe_sample(file_content: bytes) -> bool:
    # Check whether a sample is a PE32 sample or not
    try:
        pe_info = pefile.PE(data=file_content)
        if pe_info.OPTIONAL_HEADER.Magic != 267:
            return False
        return True
    except pefile.PEFormatError:
        return False


def get_md5_hash_value(file_content: bytes):
    md5_getter = md5()
    md5_getter.update(file_content)
    return md5_getter.hexdigest()


def get_prediction_results(models: list, file_content: bytes) -> dict:
    prediction_results = dict()
    version = 0
    for model in models:
        version += 1
        predictions = model.predict_a_sample(file_content)
        prediction_results.update({'model v'+str(version): predictions})
    return prediction_results


def format_output(file_name, md5_hash, predictions) -> dict:
    output = {
        'file': file_name,
        'md5': md5_hash,
        'predictions': predictions
    }
    return output


async def predict_sample(file):
    # Get file content
    file_content = file.file.read()
    # Validate the sample: show error message if the sample file is not PE32 file
    if not validate_pe_sample(file_content):
        return {'msg': 'Sorry, a PE32 file is expected, but this file is not a PE32 file.'}
    # Get file name and MD5 hash value
    file_name = file.filename
    md5_value = get_md5_hash_value(file_content)
    # Load trained models
    model_io = ModelFileIO()
    models = model_io.load_models()
    # Use models to predict the sample
    try:
        prediction_results = get_prediction_results(models, file_content)
    # Show error message if missing values encountered in the sample
    except ValueError:
        return {'msg': 'Sorry, there are some missing values in the file.'}
    return format_output(file_name, md5_value, prediction_results)


@malware_detector.post('/samples/')
async def upload_n_predict(file: UploadFile = File(...)):
    # Get file name
    file_name = file.filename
    # Check if the file's result exist in the cache memory
    cache_output = cache.read_from_cache(file_name)
    # Also, check if the file's result exist in the database
    database_output = database.retrieve_data_from_database(file_name)
    # If the file is not found in both cache memory and database,
    # predict the file, cache the result, and save to the database
    if cache_output is None and database_output is None:
        output = await predict_sample(file)
        cache.write_to_cache(file_name, output)
        database.save_data_to_database(file_name, output)
    # If the file is not found in cache but in database,
    # retrieve results immediately from database, and cache the result
    elif cache_output is None and database_output is not None:
        output = database.retrieve_data_from_database(file_name)
        cache.write_to_cache(file_name, output)
    # If the file is found in cache memory, retrieve from cache
    else:
        output = cache.read_from_cache(file_name)
    return output
