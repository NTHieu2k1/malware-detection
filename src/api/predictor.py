from src.api.database import Database
from src.api.cache import Cache
from src.models.model_file_io import ModelFileIO
from pathlib import Path
from src.utilities.file import get_project_root_directory

database = Database()
cache = Cache()

# TODO: Put inner file save location into config file
uploaded_file_location = get_project_root_directory() / Path('data/external')


def load_file(file_path):
    with open(file_path, 'rb') as file_load:
        file_content = file_load.read()
        return file_content


def get_prediction_results(model, file_content: bytes) -> dict:
    prediction_results = dict()
    predictions = model.predict_a_sample(file_content)
    prediction_results.update({'model v1': predictions})
    return prediction_results


def get_null_values_message(file_id):
    null_values_message = {'msg': 'Sorry, there are some missing values in your file.'}
    cache.save_error_messages_to_cache(file_id, null_values_message)
    database.add_error_message(file_id, null_values_message)


def delete_file(file_path):
    Path(file_path).unlink()


def analyze_file_n_predict(file_id):
    # Get file name
    file_name = database.load_file_name(file_id)
    # Get file path
    file_path = uploaded_file_location / Path(file_name)
    # Read the file
    file_content = load_file(file_path)
    try:
        # Load models
        model_io = ModelFileIO()
        model = model_io.load_model('ml_malware_detector_v1.pkl')
        # Use loaded models to predict the file
        prediction = get_prediction_results(model, file_content)
        # Save result to cache and database
        cache.save_predictions_to_cache(file_id, file_name, prediction)
        database.add_prediction(file_id, prediction)
        # Change status to "completed"
        database.update_status(file_id, new_status='completed')
    # If missing values encountered, get error message
    except ValueError:
        get_null_values_message(file_id)
        # And change status to "failed"
        database.update_status(file_id, new_status='failed')
    # Delete the file
    delete_file(file_path)
