import pandas as pd
from src.api.database import Database
from src.api.cache import Cache
from src.visualization.explorers import SampleExplorer
from src.models.model_file_io import ModelFileIO
from pathlib import Path
from src.utilities.file import get_project_root_directory
from pycaret.classification import *

database = Database()
cache = Cache()

# TODO: Put inner file save and model locations into config file
uploaded_file_location = get_project_root_directory() / Path('data/external')
model_location = get_project_root_directory() / Path('models')


def load_file(file_path):
    with open(file_path, 'rb') as file_load:
        file_content = file_load.read()
        return file_content


def load_automl_model(model_file_name: str):
    model_path = model_location / Path(model_file_name)
    model = load_model(model_path)
    return model


def get_pe_infomation(file_content: bytes) -> pd.DataFrame:
    sample_dict = SampleExplorer().get_all_pe_information(pe_file_content=file_content)
    sample_data = pd.DataFrame.from_dict(sample_dict)
    return sample_data


def get_prediction_results(model, file_content: bytes) -> dict:
    prediction_results = dict()
    # Retrieve PE infomation of the sample
    sample_data = get_pe_infomation(file_content)
    # Get raw prediction of the sample
    raw_prediction = predict_model(model, data=sample_data, raw_score=True)
    # Add the results into prediction dict
    prediction_results['model v1.1']['benign'] = '%.2f%%' % (raw_prediction['Score_benign'][0]*100)
    prediction_results['model v1.1']['malware'] = '%.2f%%' % (raw_prediction['Score_malware'][0]*100)
    return prediction_results


def get_null_values_message(file_id):
    null_values_message = {'msg': 'Sorry, there are some missing values in your file.'}
    cache.save_error_messages_to_cache(file_id, null_values_message)
    database.add_error_message(file_id, null_values_message)


def delete_file(file_path):
    Path(file_path).unlink()


def automl_analyze_file_n_predict(file_id):
    # Get file name
    file_name = database.load_file_name(file_id)
    # Get file path
    file_path = uploaded_file_location / Path(file_name)
    # Read the file
    file_content = load_file(file_path)
    try:
        # Load model
        model = load_automl_model('ml_malware_detector_v1.1')
        # Use loaded model to predict the file
        prediction = get_prediction_results(model, file_content)
        # Save result to cache and database
        cache.save_predictions_to_cache(file_id, file_name, prediction)
        database.add_prediction(file_id, prediction)
        # Change status to "completed"
        database.update_status(file_id, new_status='completed')
    # If missing values encountered, get error message
    except ValueError:
        get_null_values_message(file_id)
        # And change status to "failed"
        database.update_status(file_id, new_status='failed')
    # Delete the file
    delete_file(file_path)
