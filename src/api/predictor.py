from src.api.database import Database
from src.api.cache import Cache
from src.models.model_file_io import ModelFileIO
from pathlib import Path

database = Database()
cache = Cache()


def load_file(file_path):
    with open(file_path, 'rb') as file_load:
        file_content = file_load.read()
        return file_content


def get_prediction_results(models: list, file_content: bytes) -> dict:
    prediction_results = dict()
    version = 0
    for model in models:
        version += 1
        predictions = model.predict_a_sample(file_content)
        prediction_results.update({'model v' + str(version): predictions})
    return prediction_results


def format_output(file_name, md5_hash, predictions: dict) -> dict:
    output = {
        'file': file_name,
        'md5': md5_hash,
        'predictions': predictions
    }
    return output


def get_null_values_message(file_id):
    null_values_message = {'msg': 'Sorry, there are some missing values in your file.'}
    cache.write_to_cache(file_id, null_values_message)
    database.save_new_error_file(file_id, null_values_message)


def delete_file(file_path):
    Path(file_path).unlink()


def analyze_file_n_predict(file_id):
    # Get file name
    file_name = database.load_file_name(file_id)
    # Get file path
    file_path = database.load_file_path(file_id)
    # Read the file
    file_content = load_file(file_path)
    try:
        # Load models
        model_io = ModelFileIO()
        models = model_io.load_models()
        # Use loaded models to predict the file
        prediction = get_prediction_results(models, file_content)
        # Put all information to full prediction result
        prediction_result = format_output(file_name, file_id, prediction)
        # Save result to cache and database
        cache.write_to_cache(file_id, prediction_result)
        database.save_new_prediction(file_id, prediction_result)
        # Change status to "completed"
        database.update_status(file_id, new_status='completed')
    # If missing values encountered, get error message
    except ValueError:
        get_null_values_message(file_id)
        # And change status to "failed"
        database.update_status(file_id, new_status='failed')
    # Delete the file
    delete_file(file_path)
