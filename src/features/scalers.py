import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from abc import ABC, abstractmethod
from src.utilities.file import get_project_root_directory
from pathlib import Path
import numpy as np


class Scaler(ABC):
    @abstractmethod
    def fit(self):
        pass

    @abstractmethod
    def transform(self):
        pass

    @abstractmethod
    def save_to_csv(self):
        pass


class RebuiltMinMaxScaler(Scaler):
    def __init__(self, dataframe: pd.DataFrame = None):
        self.scaler = MinMaxScaler()
        self._raw_csv = get_project_root_directory() / Path('data/interim/reduced_malware_dataset.csv')
        if dataframe is None:
            self.raw_data = pd.read_csv(self._raw_csv)
        else:
            self.raw_data = dataframe
        self.features = self.raw_data.columns[:-1]
        self.features_data = np.array([])
        self.scaled_data = pd.DataFrame()
        self.final_csv = get_project_root_directory() / Path('data/processed/final_malware_dataset.csv')

    def fit(self):
        self.features_data = np.asarray(self.raw_data.drop(['Class'], axis=1))
        self.scaler.fit(self.features_data)

    def transform(self):
        # Scale the features data
        scaled_features = self.scaler.transform(self.features_data)
        # Concatenate features and classes
        scaled_features_dataframe = pd.DataFrame(scaled_features, columns=self.features)
        classes_dataframe = self.raw_data['Class']
        self.scaled_data = pd.concat([scaled_features_dataframe, classes_dataframe], axis=1)

    def save_to_csv(self):
        self.scaled_data.to_csv(self.final_csv, index=False)
