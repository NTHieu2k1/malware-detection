from src.utilities.file import get_project_root_directory
from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_selection import SelectFromModel
from pathlib import Path
import pandas as pd
import numpy as np
from abc import ABC, abstractmethod


class Selector(ABC):
    @abstractmethod
    def train_selector(self):
        pass

    @abstractmethod
    def select_features(self):
        pass

    @abstractmethod
    def transform(self):
        pass

    @abstractmethod
    def save_to_csv(self):
        pass


class RandomForestSelector(Selector):
    def __init__(self, dataframe: pd.DataFrame = None):
        self._preprocessed_csv = get_project_root_directory() / Path('data/interim/preprocessed_malware_dataset.csv')
        if dataframe is None:
            self.data = pd.read_csv(self._preprocessed_csv)
        else:
            self.data = dataframe
        self.reduced_csv = get_project_root_directory() / Path('data/interim/reduced_malware_dataset.csv')
        self.reduced_data = pd.DataFrame
        self.all_features = self.data.columns[:-1]
        self.selected_features = list()
        self.base_selector = RandomForestClassifier()
        self.selection_threshold = 0
        self.selector = None
        self.features_data = np.array(list())
        self.classes = np.array(list())

    def train_selector(self):
        self.features_data = np.asarray(self.data.drop(['Class'], axis=1))
        self.classes = np.asarray(self.data['Class'])
        self.base_selector = RandomForestClassifier(n_estimators=1000)
        self.base_selector.fit(self.features_data, self.classes)

    def select_features(self):
        # Set the threshold for feature selection
        self.selection_threshold = 0.018
        # Use the selector object (not Random Forest) for selection
        self.selector = SelectFromModel(self.base_selector, threshold=self.selection_threshold)
        self.selector.fit(self.features_data, self.classes)
        self.selected_features = self.selector.get_feature_names_out(input_features=self.all_features)

    def transform(self):
        reduced_features = self.data[self.selected_features]
        # Add "Class" attribute to the reduced dataframe
        classes = self.data['Class']
        self.reduced_data = pd.concat([reduced_features, classes], axis=1)

    def save_to_csv(self):
        self.reduced_data.to_csv(path_or_buf=self.reduced_csv, index=False)
