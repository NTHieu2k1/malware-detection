from pathlib import Path
from abc import ABC, abstractmethod
from pefile import PE
from src.utilities.file import get_project_root_directory
import os


class Cleaner(ABC):
    @abstractmethod
    def get_raw_data_directory(self):
        pass

    @abstractmethod
    def clean_non_pe_files(self):
        pass


class BenignCleaner(Cleaner):
    def __init__(self):
        self.inner_benign_dir = 'data/raw/benign'
        self._full_raw_benign_dir = ''

    @property
    def full_raw_benign_dir(self):
        return self._full_raw_benign_dir

    @full_raw_benign_dir.setter
    def full_raw_benign_dir(self, new_dir_value):
        self._full_raw_benign_dir = new_dir_value

    def get_raw_data_directory(self):
        project_root_directory = get_project_root_directory()
        self.full_raw_benign_dir = project_root_directory / Path(self.inner_benign_dir)

    def clean_non_pe_files(self):
        # Get the list of all data file paths
        all_file_paths = list(Path(self.full_raw_benign_dir).glob('**/*'))[20:]
        # Clear all files that are not PE files (which cannot be read by PE reader)
        index = 0
        no_of_paths = len(all_file_paths)
        for file_path in all_file_paths:
            try:
                pe_info = PE(file_path)
                # Clear files which are not PE32 files
                if hex(pe_info.OPTIONAL_HEADER.Magic) != 0x10b:
                    file_path.unlink()
            # If read error occurred, delete the file
            except:
                file_path.unlink()
            os.system('clear')
            print('Cleaning progress: %.2f%%' % ((index/no_of_paths)*100))
            index += 1


class MalwareCleaner(Cleaner):
    def __init__(self):
        self.inner_malware_dir = 'data/raw/malware'
        self._full_malware_dir = Path()

    @property
    def full_malware_dir(self):
        return self._full_malware_dir

    @full_malware_dir.setter
    def full_malware_dir(self, updated_dir):
        self._full_malware_dir = updated_dir

    def get_raw_data_directory(self):
        self.full_malware_dir = get_project_root_directory() / Path(self.inner_malware_dir)

    def clean_non_pe_files(self):
        # Get list of all malware file paths
        all_file_paths = list(self.full_malware_dir.glob('*'))
        index = 0
        no_of_paths = len(all_file_paths)
        # Clear all malware files that are not PE files (which cannot be read by PE reader)
        for file_path in all_file_paths:
            try:
                pe_info = PE(file_path)
                # Clear files which are not PE32 files
                if hex(pe_info.OPTIONAL_HEADER.Magic) != 0x10b:
                    file_path.unlink()
            # If read error occurred, delete that file
            except:
                file_path.unlink()
            os.system('clear')
            print('Cleaning progress: %.2f%%' % ((index/no_of_paths)*100))
            index += 1
