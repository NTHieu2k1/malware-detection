from pathlib import Path
from abc import ABC, abstractmethod
from src.utilities.file import get_project_root_directory


class Cleaner(ABC):
    @abstractmethod
    def get_raw_data_directory(self):
        pass

    @abstractmethod
    def clean_non_pe_files(self):
        pass


class BenignCleaner(Cleaner):
    def __init__(self):
        self.inner_benign_dir = 'data/raw/benign'
        self._full_raw_benign_dir = ''

    @property
    def full_raw_benign_dir(self):
        return self._full_raw_benign_dir

    @full_raw_benign_dir.setter
    def full_raw_benign_dir(self, new_dir_value):
        self._full_raw_benign_dir = new_dir_value

    def get_raw_data_directory(self):
        project_root_directory = get_project_root_directory()
        self.full_raw_benign_dir = project_root_directory / Path(self.inner_benign_dir)

    def clean_non_pe_files(self):
        # Get the list of all data file paths
        all_file_paths = list(Path(self.full_raw_benign_dir).glob('**/*.*'))
        # Clear all files that do not have '.exe' extension, but keep the .gitkeep file
        for file_path in all_file_paths:
            if str(file_path).endswith('.gitkeep'):
                continue
            if not (str(file_path).endswith('.exe')):
                file_path.unlink(missing_ok=True)
